
/*
 *    MCreator note: This file will be REGENERATED on each build.
 */
package ru.power_umc.keepersofthestonestwo.init;

import ru.power_umc.keepersofthestonestwo.procedures.StoneGetRechargeStateProcedure;
import ru.power_umc.keepersofthestonestwo.item.WaterStoneItem;
import ru.power_umc.keepersofthestonestwo.item.WaterKatanaItem;
import ru.power_umc.keepersofthestonestwo.item.WaterBatteryItem;
import ru.power_umc.keepersofthestonestwo.item.WaterArmorItem;
import ru.power_umc.keepersofthestonestwo.item.VacuumStoneItem;
import ru.power_umc.keepersofthestonestwo.item.VacuumDaggerItem;
import ru.power_umc.keepersofthestonestwo.item.VacuumBatteryItem;
import ru.power_umc.keepersofthestonestwo.item.VacuumArmorItem;
import ru.power_umc.keepersofthestonestwo.item.TornadoStoneItem;
import ru.power_umc.keepersofthestonestwo.item.TornadoBatteryItem;
import ru.power_umc.keepersofthestonestwo.item.TornadoAxeItem;
import ru.power_umc.keepersofthestonestwo.item.TornadoArmorItem;
import ru.power_umc.keepersofthestonestwo.item.TimeStoneItem;
import ru.power_umc.keepersofthestonestwo.item.TeleportationStoneItem;
import ru.power_umc.keepersofthestonestwo.item.TechnologyStoneItem;
import ru.power_umc.keepersofthestonestwo.item.SunStoneItem;
import ru.power_umc.keepersofthestonestwo.item.SunBatteryItem;
import ru.power_umc.keepersofthestonestwo.item.SunArmorItem;
import ru.power_umc.keepersofthestonestwo.item.StarPotion500Item;
import ru.power_umc.keepersofthestonestwo.item.StarPotion200Item;
import ru.power_umc.keepersofthestonestwo.item.StarPotion100Item;
import ru.power_umc.keepersofthestonestwo.item.SpiritStoneItem;
import ru.power_umc.keepersofthestonestwo.item.SpeedStoneItem;
import ru.power_umc.keepersofthestonestwo.item.SpaceStoneItem;
import ru.power_umc.keepersofthestonestwo.item.SoundStoneItem;
import ru.power_umc.keepersofthestonestwo.item.SoundDaggerItem;
import ru.power_umc.keepersofthestonestwo.item.SoundBatteryItem;
import ru.power_umc.keepersofthestonestwo.item.SoundArmorItem;
import ru.power_umc.keepersofthestonestwo.item.SolarBladeItem;
import ru.power_umc.keepersofthestonestwo.item.SmokeStoneItem;
import ru.power_umc.keepersofthestonestwo.item.ShadowStoneItem;
import ru.power_umc.keepersofthestonestwo.item.ShadowScytheItem;
import ru.power_umc.keepersofthestonestwo.item.ShadowBatteryItem;
import ru.power_umc.keepersofthestonestwo.item.ShadowArmorItem;
import ru.power_umc.keepersofthestonestwo.item.SandStoneItem;
import ru.power_umc.keepersofthestonestwo.item.RightMetalGauntletItem;
import ru.power_umc.keepersofthestonestwo.item.RawDepletedEnergiumItem;
import ru.power_umc.keepersofthestonestwo.item.RainStoneItem;
import ru.power_umc.keepersofthestonestwo.item.RainBowItem;
import ru.power_umc.keepersofthestonestwo.item.RainBatteryItem;
import ru.power_umc.keepersofthestonestwo.item.RainArmorItem;
import ru.power_umc.keepersofthestonestwo.item.PoisonStoneItem;
import ru.power_umc.keepersofthestonestwo.item.PlantsStoneItem;
import ru.power_umc.keepersofthestonestwo.item.PlantsBatteryItem;
import ru.power_umc.keepersofthestonestwo.item.PlantsArmorItem;
import ru.power_umc.keepersofthestonestwo.item.PlagueStoneItem;
import ru.power_umc.keepersofthestonestwo.item.OceanicTridentItem;
import ru.power_umc.keepersofthestonestwo.item.OceanStoneItem;
import ru.power_umc.keepersofthestonestwo.item.OceanBatteryItem;
import ru.power_umc.keepersofthestonestwo.item.OceanArmorItem;
import ru.power_umc.keepersofthestonestwo.item.MusicStoneItem;
import ru.power_umc.keepersofthestonestwo.item.MushroomsStoneItem;
import ru.power_umc.keepersofthestonestwo.item.MoonStoneItem;
import ru.power_umc.keepersofthestonestwo.item.MistStoneItem;
import ru.power_umc.keepersofthestonestwo.item.MindStoneItem;
import ru.power_umc.keepersofthestonestwo.item.MetalStoneItem;
import ru.power_umc.keepersofthestonestwo.item.MetalBatteryItem;
import ru.power_umc.keepersofthestonestwo.item.MetalArmorItem;
import ru.power_umc.keepersofthestonestwo.item.MercuryStoneItem;
import ru.power_umc.keepersofthestonestwo.item.MagnetStoneItem;
import ru.power_umc.keepersofthestonestwo.item.MagicFireballItem;
import ru.power_umc.keepersofthestonestwo.item.LightningStoneItem;
import ru.power_umc.keepersofthestonestwo.item.LightningFalchionItem;
import ru.power_umc.keepersofthestonestwo.item.LightningBatteryItem;
import ru.power_umc.keepersofthestonestwo.item.LightningArmorItem;
import ru.power_umc.keepersofthestonestwo.item.LightSwordItem;
import ru.power_umc.keepersofthestonestwo.item.LightStoneItem;
import ru.power_umc.keepersofthestonestwo.item.LightBatteryItem;
import ru.power_umc.keepersofthestonestwo.item.LightArmorItem;
import ru.power_umc.keepersofthestonestwo.item.LeftMetalGauntletItem;
import ru.power_umc.keepersofthestonestwo.item.LavaStoneItem;
import ru.power_umc.keepersofthestonestwo.item.LavaHammerItem;
import ru.power_umc.keepersofthestonestwo.item.LavaBatteryItem;
import ru.power_umc.keepersofthestonestwo.item.LavaArmorItem;
import ru.power_umc.keepersofthestonestwo.item.IceStoneItem;
import ru.power_umc.keepersofthestonestwo.item.IceSpearItem;
import ru.power_umc.keepersofthestonestwo.item.IceBatteryItem;
import ru.power_umc.keepersofthestonestwo.item.IceArmorItem;
import ru.power_umc.keepersofthestonestwo.item.GreenStaffItem;
import ru.power_umc.keepersofthestonestwo.item.GravityStoneItem;
import ru.power_umc.keepersofthestonestwo.item.GoldenDustStoneItem;
import ru.power_umc.keepersofthestonestwo.item.FormStoneItem;
import ru.power_umc.keepersofthestonestwo.item.FireSwordItem;
import ru.power_umc.keepersofthestonestwo.item.FireStoneItem;
import ru.power_umc.keepersofthestonestwo.item.FireBatteryItem;
import ru.power_umc.keepersofthestonestwo.item.FireArmorItem;
import ru.power_umc.keepersofthestonestwo.item.ExplosionStoneItem;
import ru.power_umc.keepersofthestonestwo.item.EtherStoneItem;
import ru.power_umc.keepersofthestonestwo.item.EtherGlaiveItem;
import ru.power_umc.keepersofthestonestwo.item.EtherBatteryItem;
import ru.power_umc.keepersofthestonestwo.item.EtherArmorItem;
import ru.power_umc.keepersofthestonestwo.item.EnergyStoneItem;
import ru.power_umc.keepersofthestonestwo.item.EnergyStaffItem;
import ru.power_umc.keepersofthestonestwo.item.EnergyBatteryItem;
import ru.power_umc.keepersofthestonestwo.item.EnergyArmorItem;
import ru.power_umc.keepersofthestonestwo.item.EnergiumUpgradeSmithingTemplateItem;
import ru.power_umc.keepersofthestonestwo.item.EnergiumSwordItem;
import ru.power_umc.keepersofthestonestwo.item.EnergiumShovelItem;
import ru.power_umc.keepersofthestonestwo.item.EnergiumPickaxeItem;
import ru.power_umc.keepersofthestonestwo.item.EnergiumIngotItem;
import ru.power_umc.keepersofthestonestwo.item.EnergiumHoeItem;
import ru.power_umc.keepersofthestonestwo.item.EnergiumCoreItem;
import ru.power_umc.keepersofthestonestwo.item.EnergiumAxeItem;
import ru.power_umc.keepersofthestonestwo.item.EnergiumArmorItem;
import ru.power_umc.keepersofthestonestwo.item.EmptyBatteryItem;
import ru.power_umc.keepersofthestonestwo.item.EarthStoneItem;
import ru.power_umc.keepersofthestonestwo.item.EarthShieldItem;
import ru.power_umc.keepersofthestonestwo.item.EarthHammerItem;
import ru.power_umc.keepersofthestonestwo.item.EarthBatteryItem;
import ru.power_umc.keepersofthestonestwo.item.EarthArmorItem;
import ru.power_umc.keepersofthestonestwo.item.DestructionStoneItem;
import ru.power_umc.keepersofthestonestwo.item.DepletedEnergiumIngotItem;
import ru.power_umc.keepersofthestonestwo.item.DarknessStoneItem;
import ru.power_umc.keepersofthestonestwo.item.CrystalStoneItem;
import ru.power_umc.keepersofthestonestwo.item.CrystalKnifeItem;
import ru.power_umc.keepersofthestonestwo.item.CrystalBatteryItem;
import ru.power_umc.keepersofthestonestwo.item.CrystalArmorItem;
import ru.power_umc.keepersofthestonestwo.item.CreationStoneItem;
import ru.power_umc.keepersofthestonestwo.item.BlueFlameStoneItem;
import ru.power_umc.keepersofthestonestwo.item.BloodStoneItem;
import ru.power_umc.keepersofthestonestwo.item.AnimalsStoneItem;
import ru.power_umc.keepersofthestonestwo.item.AnimalsHalberdItem;
import ru.power_umc.keepersofthestonestwo.item.AnimalsBatteryItem;
import ru.power_umc.keepersofthestonestwo.item.AnimalsArmorItem;
import ru.power_umc.keepersofthestonestwo.item.AmberStoneItem;
import ru.power_umc.keepersofthestonestwo.item.AirStoneItem;
import ru.power_umc.keepersofthestonestwo.item.AirRapierItem;
import ru.power_umc.keepersofthestonestwo.item.AirBatteryItem;
import ru.power_umc.keepersofthestonestwo.item.AirArmorItem;
import ru.power_umc.keepersofthestonestwo.PowerMod;

import net.neoforged.neoforge.registries.DeferredRegister;
import net.neoforged.neoforge.registries.DeferredHolder;
import net.neoforged.fml.event.lifecycle.FMLClientSetupEvent;
import net.neoforged.fml.common.Mod;
import net.neoforged.bus.api.SubscribeEvent;
import net.neoforged.bus.api.IEventBus;
import net.neoforged.api.distmarker.OnlyIn;
import net.neoforged.api.distmarker.Dist;

import net.minecraft.world.level.block.Block;
import net.minecraft.world.item.Item;
import net.minecraft.world.item.BlockItem;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.core.registries.BuiltInRegistries;
import net.minecraft.client.renderer.item.ItemProperties;

@Mod.EventBusSubscriber(bus = Mod.EventBusSubscriber.Bus.MOD)
public class PowerModItems {
	public static final DeferredRegister<Item> REGISTRY = DeferredRegister.create(BuiltInRegistries.ITEM, PowerMod.MODID);
	public static final DeferredHolder<Item, Item> FIRE_STONE = REGISTRY.register("fire_stone", () -> new FireStoneItem());
	public static final DeferredHolder<Item, Item> AIR_STONE = REGISTRY.register("air_stone", () -> new AirStoneItem());
	public static final DeferredHolder<Item, Item> EARTH_STONE = REGISTRY.register("earth_stone", () -> new EarthStoneItem());
	public static final DeferredHolder<Item, Item> WATER_STONE = REGISTRY.register("water_stone", () -> new WaterStoneItem());
	public static final DeferredHolder<Item, Item> ETHER_STONE = REGISTRY.register("ether_stone", () -> new EtherStoneItem());
	public static final DeferredHolder<Item, Item> ICE_STONE = REGISTRY.register("ice_stone", () -> new IceStoneItem());
	public static final DeferredHolder<Item, Item> LIGHTNING_STONE = REGISTRY.register("lightning_stone", () -> new LightningStoneItem());
	public static final DeferredHolder<Item, Item> SOUND_STONE = REGISTRY.register("sound_stone", () -> new SoundStoneItem());
	public static final DeferredHolder<Item, Item> CRYSTAL_STONE = REGISTRY.register("crystal_stone", () -> new CrystalStoneItem());
	public static final DeferredHolder<Item, Item> LAVA_STONE = REGISTRY.register("lava_stone", () -> new LavaStoneItem());
	public static final DeferredHolder<Item, Item> RAIN_STONE = REGISTRY.register("rain_stone", () -> new RainStoneItem());
	public static final DeferredHolder<Item, Item> TORNADO_STONE = REGISTRY.register("tornado_stone", () -> new TornadoStoneItem());
	public static final DeferredHolder<Item, Item> OCEAN_STONE = REGISTRY.register("ocean_stone", () -> new OceanStoneItem());
	public static final DeferredHolder<Item, Item> PLANTS_STONE = REGISTRY.register("plants_stone", () -> new PlantsStoneItem());
	public static final DeferredHolder<Item, Item> ANIMALS_STONE = REGISTRY.register("animals_stone", () -> new AnimalsStoneItem());
	public static final DeferredHolder<Item, Item> METAL_STONE = REGISTRY.register("metal_stone", () -> new MetalStoneItem());
	public static final DeferredHolder<Item, Item> LIGHT_STONE = REGISTRY.register("light_stone", () -> new LightStoneItem());
	public static final DeferredHolder<Item, Item> SHADOW_STONE = REGISTRY.register("shadow_stone", () -> new ShadowStoneItem());
	public static final DeferredHolder<Item, Item> VACUUM_STONE = REGISTRY.register("vacuum_stone", () -> new VacuumStoneItem());
	public static final DeferredHolder<Item, Item> ENERGY_STONE = REGISTRY.register("energy_stone", () -> new EnergyStoneItem());
	public static final DeferredHolder<Item, Item> STAR_POTION_100 = REGISTRY.register("star_potion_100", () -> new StarPotion100Item());
	public static final DeferredHolder<Item, Item> STAR_POTION_200 = REGISTRY.register("star_potion_200", () -> new StarPotion200Item());
	public static final DeferredHolder<Item, Item> STAR_POTION_500 = REGISTRY.register("star_potion_500", () -> new StarPotion500Item());
	public static final DeferredHolder<Item, Item> KEEPERS_BOX = block(PowerModBlocks.KEEPERS_BOX);
	public static final DeferredHolder<Item, Item> DEPLETED_ENERGIUM_ORE = block(PowerModBlocks.DEPLETED_ENERGIUM_ORE);
	public static final DeferredHolder<Item, Item> DEPLETED_ENERGIUM_BLOCK = block(PowerModBlocks.DEPLETED_ENERGIUM_BLOCK);
	public static final DeferredHolder<Item, Item> ENERGIUM_BLOCK = block(PowerModBlocks.ENERGIUM_BLOCK);
	public static final DeferredHolder<Item, Item> RAW_DEPLETED_ENERGIUM = REGISTRY.register("raw_depleted_energium", () -> new RawDepletedEnergiumItem());
	public static final DeferredHolder<Item, Item> DEPLETED_ENERGIUM_INGOT = REGISTRY.register("depleted_energium_ingot", () -> new DepletedEnergiumIngotItem());
	public static final DeferredHolder<Item, Item> ENERGIUM_INGOT = REGISTRY.register("energium_ingot", () -> new EnergiumIngotItem());
	public static final DeferredHolder<Item, Item> BATTERY_CHARGER = block(PowerModBlocks.BATTERY_CHARGER);
	public static final DeferredHolder<Item, Item> ENERGIUM_UPGRADE_SMITHING_TEMPLATE = REGISTRY.register("energium_upgrade_smithing_template", () -> new EnergiumUpgradeSmithingTemplateItem());
	public static final DeferredHolder<Item, Item> ENERGIUM_PICKAXE = REGISTRY.register("energium_pickaxe", () -> new EnergiumPickaxeItem());
	public static final DeferredHolder<Item, Item> ENERGIUM_AXE = REGISTRY.register("energium_axe", () -> new EnergiumAxeItem());
	public static final DeferredHolder<Item, Item> ENERGIUM_SWORD = REGISTRY.register("energium_sword", () -> new EnergiumSwordItem());
	public static final DeferredHolder<Item, Item> ENERGIUM_SHOVEL = REGISTRY.register("energium_shovel", () -> new EnergiumShovelItem());
	public static final DeferredHolder<Item, Item> ENERGIUM_HOE = REGISTRY.register("energium_hoe", () -> new EnergiumHoeItem());
	public static final DeferredHolder<Item, Item> ENERGIUM_ARMOR_HELMET = REGISTRY.register("energium_armor_helmet", () -> new EnergiumArmorItem.Helmet());
	public static final DeferredHolder<Item, Item> ENERGIUM_ARMOR_CHESTPLATE = REGISTRY.register("energium_armor_chestplate", () -> new EnergiumArmorItem.Chestplate());
	public static final DeferredHolder<Item, Item> ENERGIUM_ARMOR_LEGGINGS = REGISTRY.register("energium_armor_leggings", () -> new EnergiumArmorItem.Leggings());
	public static final DeferredHolder<Item, Item> ENERGIUM_ARMOR_BOOTS = REGISTRY.register("energium_armor_boots", () -> new EnergiumArmorItem.Boots());
	public static final DeferredHolder<Item, Item> ENERGIUM_CORE = REGISTRY.register("energium_core", () -> new EnergiumCoreItem());
	public static final DeferredHolder<Item, Item> EMPTY_BATTERY = REGISTRY.register("empty_battery", () -> new EmptyBatteryItem());
	public static final DeferredHolder<Item, Item> FIRE_BATTERY = REGISTRY.register("fire_battery", () -> new FireBatteryItem());
	public static final DeferredHolder<Item, Item> AIR_BATTERY = REGISTRY.register("air_battery", () -> new AirBatteryItem());
	public static final DeferredHolder<Item, Item> EARTH_BATTERY = REGISTRY.register("earth_battery", () -> new EarthBatteryItem());
	public static final DeferredHolder<Item, Item> WATER_BATTERY = REGISTRY.register("water_battery", () -> new WaterBatteryItem());
	public static final DeferredHolder<Item, Item> ETHER_BATTERY = REGISTRY.register("ether_battery", () -> new EtherBatteryItem());
	public static final DeferredHolder<Item, Item> ICE_BATTERY = REGISTRY.register("ice_battery", () -> new IceBatteryItem());
	public static final DeferredHolder<Item, Item> LIGHTNING_BATTERY = REGISTRY.register("lightning_battery", () -> new LightningBatteryItem());
	public static final DeferredHolder<Item, Item> SOUND_BATTERY = REGISTRY.register("sound_battery", () -> new SoundBatteryItem());
	public static final DeferredHolder<Item, Item> CRYSTAL_BATTERY = REGISTRY.register("crystal_battery", () -> new CrystalBatteryItem());
	public static final DeferredHolder<Item, Item> LAVA_BATTERY = REGISTRY.register("lava_battery", () -> new LavaBatteryItem());
	public static final DeferredHolder<Item, Item> RAIN_BATTERY = REGISTRY.register("rain_battery", () -> new RainBatteryItem());
	public static final DeferredHolder<Item, Item> TORNADO_BATTERY = REGISTRY.register("tornado_battery", () -> new TornadoBatteryItem());
	public static final DeferredHolder<Item, Item> OCEAN_BATTERY = REGISTRY.register("ocean_battery", () -> new OceanBatteryItem());
	public static final DeferredHolder<Item, Item> PLANTS_BATTERY = REGISTRY.register("plants_battery", () -> new PlantsBatteryItem());
	public static final DeferredHolder<Item, Item> ANIMALS_BATTERY = REGISTRY.register("animals_battery", () -> new AnimalsBatteryItem());
	public static final DeferredHolder<Item, Item> METAL_BATTERY = REGISTRY.register("metal_battery", () -> new MetalBatteryItem());
	public static final DeferredHolder<Item, Item> LIGHT_BATTERY = REGISTRY.register("light_battery", () -> new LightBatteryItem());
	public static final DeferredHolder<Item, Item> SHADOW_BATTERY = REGISTRY.register("shadow_battery", () -> new ShadowBatteryItem());
	public static final DeferredHolder<Item, Item> VACUUM_BATTERY = REGISTRY.register("vacuum_battery", () -> new VacuumBatteryItem());
	public static final DeferredHolder<Item, Item> ENERGY_BATTERY = REGISTRY.register("energy_battery", () -> new EnergyBatteryItem());
	public static final DeferredHolder<Item, Item> FIRE_ARMOR_HELMET = REGISTRY.register("fire_armor_helmet", () -> new FireArmorItem.Helmet());
	public static final DeferredHolder<Item, Item> FIRE_ARMOR_CHESTPLATE = REGISTRY.register("fire_armor_chestplate", () -> new FireArmorItem.Chestplate());
	public static final DeferredHolder<Item, Item> FIRE_ARMOR_LEGGINGS = REGISTRY.register("fire_armor_leggings", () -> new FireArmorItem.Leggings());
	public static final DeferredHolder<Item, Item> FIRE_ARMOR_BOOTS = REGISTRY.register("fire_armor_boots", () -> new FireArmorItem.Boots());
	public static final DeferredHolder<Item, Item> FIRE_SWORD = REGISTRY.register("fire_sword", () -> new FireSwordItem());
	public static final DeferredHolder<Item, Item> AIR_ARMOR_HELMET = REGISTRY.register("air_armor_helmet", () -> new AirArmorItem.Helmet());
	public static final DeferredHolder<Item, Item> AIR_ARMOR_CHESTPLATE = REGISTRY.register("air_armor_chestplate", () -> new AirArmorItem.Chestplate());
	public static final DeferredHolder<Item, Item> AIR_ARMOR_LEGGINGS = REGISTRY.register("air_armor_leggings", () -> new AirArmorItem.Leggings());
	public static final DeferredHolder<Item, Item> AIR_ARMOR_BOOTS = REGISTRY.register("air_armor_boots", () -> new AirArmorItem.Boots());
	public static final DeferredHolder<Item, Item> AIR_RAPIER = REGISTRY.register("air_rapier", () -> new AirRapierItem());
	public static final DeferredHolder<Item, Item> EARTH_ARMOR_HELMET = REGISTRY.register("earth_armor_helmet", () -> new EarthArmorItem.Helmet());
	public static final DeferredHolder<Item, Item> EARTH_ARMOR_CHESTPLATE = REGISTRY.register("earth_armor_chestplate", () -> new EarthArmorItem.Chestplate());
	public static final DeferredHolder<Item, Item> EARTH_ARMOR_LEGGINGS = REGISTRY.register("earth_armor_leggings", () -> new EarthArmorItem.Leggings());
	public static final DeferredHolder<Item, Item> EARTH_ARMOR_BOOTS = REGISTRY.register("earth_armor_boots", () -> new EarthArmorItem.Boots());
	public static final DeferredHolder<Item, Item> EARTH_HAMMER = REGISTRY.register("earth_hammer", () -> new EarthHammerItem());
	public static final DeferredHolder<Item, Item> WATER_KATANA = REGISTRY.register("water_katana", () -> new WaterKatanaItem());
	public static final DeferredHolder<Item, Item> WATER_ARMOR_HELMET = REGISTRY.register("water_armor_helmet", () -> new WaterArmorItem.Helmet());
	public static final DeferredHolder<Item, Item> WATER_ARMOR_CHESTPLATE = REGISTRY.register("water_armor_chestplate", () -> new WaterArmorItem.Chestplate());
	public static final DeferredHolder<Item, Item> WATER_ARMOR_LEGGINGS = REGISTRY.register("water_armor_leggings", () -> new WaterArmorItem.Leggings());
	public static final DeferredHolder<Item, Item> WATER_ARMOR_BOOTS = REGISTRY.register("water_armor_boots", () -> new WaterArmorItem.Boots());
	public static final DeferredHolder<Item, Item> ETHER_GLAIVE = REGISTRY.register("ether_glaive", () -> new EtherGlaiveItem());
	public static final DeferredHolder<Item, Item> ETHER_ARMOR_HELMET = REGISTRY.register("ether_armor_helmet", () -> new EtherArmorItem.Helmet());
	public static final DeferredHolder<Item, Item> ETHER_ARMOR_CHESTPLATE = REGISTRY.register("ether_armor_chestplate", () -> new EtherArmorItem.Chestplate());
	public static final DeferredHolder<Item, Item> ETHER_ARMOR_LEGGINGS = REGISTRY.register("ether_armor_leggings", () -> new EtherArmorItem.Leggings());
	public static final DeferredHolder<Item, Item> ETHER_ARMOR_BOOTS = REGISTRY.register("ether_armor_boots", () -> new EtherArmorItem.Boots());
	public static final DeferredHolder<Item, Item> EARTH_SHIELD = REGISTRY.register("earth_shield", () -> new EarthShieldItem());
	public static final DeferredHolder<Item, Item> ICE_ARMOR_HELMET = REGISTRY.register("ice_armor_helmet", () -> new IceArmorItem.Helmet());
	public static final DeferredHolder<Item, Item> ICE_ARMOR_CHESTPLATE = REGISTRY.register("ice_armor_chestplate", () -> new IceArmorItem.Chestplate());
	public static final DeferredHolder<Item, Item> ICE_ARMOR_LEGGINGS = REGISTRY.register("ice_armor_leggings", () -> new IceArmorItem.Leggings());
	public static final DeferredHolder<Item, Item> ICE_ARMOR_BOOTS = REGISTRY.register("ice_armor_boots", () -> new IceArmorItem.Boots());
	public static final DeferredHolder<Item, Item> LIGHTNING_ARMOR_HELMET = REGISTRY.register("lightning_armor_helmet", () -> new LightningArmorItem.Helmet());
	public static final DeferredHolder<Item, Item> LIGHTNING_ARMOR_CHESTPLATE = REGISTRY.register("lightning_armor_chestplate", () -> new LightningArmorItem.Chestplate());
	public static final DeferredHolder<Item, Item> LIGHTNING_ARMOR_LEGGINGS = REGISTRY.register("lightning_armor_leggings", () -> new LightningArmorItem.Leggings());
	public static final DeferredHolder<Item, Item> LIGHTNING_ARMOR_BOOTS = REGISTRY.register("lightning_armor_boots", () -> new LightningArmorItem.Boots());
	public static final DeferredHolder<Item, Item> MAGIC_FIREBALL = REGISTRY.register("magic_fireball", () -> new MagicFireballItem());
	public static final DeferredHolder<Item, Item> SOUND_ARMOR_HELMET = REGISTRY.register("sound_armor_helmet", () -> new SoundArmorItem.Helmet());
	public static final DeferredHolder<Item, Item> SOUND_ARMOR_CHESTPLATE = REGISTRY.register("sound_armor_chestplate", () -> new SoundArmorItem.Chestplate());
	public static final DeferredHolder<Item, Item> SOUND_ARMOR_LEGGINGS = REGISTRY.register("sound_armor_leggings", () -> new SoundArmorItem.Leggings());
	public static final DeferredHolder<Item, Item> SOUND_ARMOR_BOOTS = REGISTRY.register("sound_armor_boots", () -> new SoundArmorItem.Boots());
	public static final DeferredHolder<Item, Item> CRYSTAL_ARMOR_HELMET = REGISTRY.register("crystal_armor_helmet", () -> new CrystalArmorItem.Helmet());
	public static final DeferredHolder<Item, Item> CRYSTAL_ARMOR_CHESTPLATE = REGISTRY.register("crystal_armor_chestplate", () -> new CrystalArmorItem.Chestplate());
	public static final DeferredHolder<Item, Item> CRYSTAL_ARMOR_LEGGINGS = REGISTRY.register("crystal_armor_leggings", () -> new CrystalArmorItem.Leggings());
	public static final DeferredHolder<Item, Item> CRYSTAL_ARMOR_BOOTS = REGISTRY.register("crystal_armor_boots", () -> new CrystalArmorItem.Boots());
	public static final DeferredHolder<Item, Item> LAVA_ARMOR_HELMET = REGISTRY.register("lava_armor_helmet", () -> new LavaArmorItem.Helmet());
	public static final DeferredHolder<Item, Item> LAVA_ARMOR_CHESTPLATE = REGISTRY.register("lava_armor_chestplate", () -> new LavaArmorItem.Chestplate());
	public static final DeferredHolder<Item, Item> LAVA_ARMOR_LEGGINGS = REGISTRY.register("lava_armor_leggings", () -> new LavaArmorItem.Leggings());
	public static final DeferredHolder<Item, Item> LAVA_ARMOR_BOOTS = REGISTRY.register("lava_armor_boots", () -> new LavaArmorItem.Boots());
	public static final DeferredHolder<Item, Item> SUN_STONE = REGISTRY.register("sun_stone", () -> new SunStoneItem());
	public static final DeferredHolder<Item, Item> MOON_STONE = REGISTRY.register("moon_stone", () -> new MoonStoneItem());
	public static final DeferredHolder<Item, Item> SPACE_STONE = REGISTRY.register("space_stone", () -> new SpaceStoneItem());
	public static final DeferredHolder<Item, Item> TIME_STONE = REGISTRY.register("time_stone", () -> new TimeStoneItem());
	public static final DeferredHolder<Item, Item> BLOOD_STONE = REGISTRY.register("blood_stone", () -> new BloodStoneItem());
	public static final DeferredHolder<Item, Item> TECHNOLOGY_STONE = REGISTRY.register("technology_stone", () -> new TechnologyStoneItem());
	public static final DeferredHolder<Item, Item> TELEPORTATION_STONE = REGISTRY.register("teleportation_stone", () -> new TeleportationStoneItem());
	public static final DeferredHolder<Item, Item> EXPLOSION_STONE = REGISTRY.register("explosion_stone", () -> new ExplosionStoneItem());
	public static final DeferredHolder<Item, Item> AMBER_STONE = REGISTRY.register("amber_stone", () -> new AmberStoneItem());
	public static final DeferredHolder<Item, Item> CREATION_STONE = REGISTRY.register("creation_stone", () -> new CreationStoneItem());
	public static final DeferredHolder<Item, Item> DESTRUCTION_STONE = REGISTRY.register("destruction_stone", () -> new DestructionStoneItem());
	public static final DeferredHolder<Item, Item> MIST_STONE = REGISTRY.register("mist_stone", () -> new MistStoneItem());
	public static final DeferredHolder<Item, Item> SAND_STONE = REGISTRY.register("sand_stone", () -> new SandStoneItem());
	public static final DeferredHolder<Item, Item> SPEED_STONE = REGISTRY.register("speed_stone", () -> new SpeedStoneItem());
	public static final DeferredHolder<Item, Item> POISON_STONE = REGISTRY.register("poison_stone", () -> new PoisonStoneItem());
	public static final DeferredHolder<Item, Item> MAGNET_STONE = REGISTRY.register("magnet_stone", () -> new MagnetStoneItem());
	public static final DeferredHolder<Item, Item> MUSHROOMS_STONE = REGISTRY.register("mushrooms_stone", () -> new MushroomsStoneItem());
	public static final DeferredHolder<Item, Item> MERCURY_STONE = REGISTRY.register("mercury_stone", () -> new MercuryStoneItem());
	public static final DeferredHolder<Item, Item> MUSIC_STONE = REGISTRY.register("music_stone", () -> new MusicStoneItem());
	public static final DeferredHolder<Item, Item> PLAGUE_STONE = REGISTRY.register("plague_stone", () -> new PlagueStoneItem());
	public static final DeferredHolder<Item, Item> BLUE_FLAME_STONE = REGISTRY.register("blue_flame_stone", () -> new BlueFlameStoneItem());
	public static final DeferredHolder<Item, Item> GRAVITY_STONE = REGISTRY.register("gravity_stone", () -> new GravityStoneItem());
	public static final DeferredHolder<Item, Item> SMOKE_STONE = REGISTRY.register("smoke_stone", () -> new SmokeStoneItem());
	public static final DeferredHolder<Item, Item> FORM_STONE = REGISTRY.register("form_stone", () -> new FormStoneItem());
	public static final DeferredHolder<Item, Item> MIND_STONE = REGISTRY.register("mind_stone", () -> new MindStoneItem());
	public static final DeferredHolder<Item, Item> GOLDEN_DUST_STONE = REGISTRY.register("golden_dust_stone", () -> new GoldenDustStoneItem());
	public static final DeferredHolder<Item, Item> DARKNESS_STONE = REGISTRY.register("darkness_stone", () -> new DarknessStoneItem());
	public static final DeferredHolder<Item, Item> SPIRIT_STONE = REGISTRY.register("spirit_stone", () -> new SpiritStoneItem());
	public static final DeferredHolder<Item, Item> ICE_SPEAR = REGISTRY.register("ice_spear", () -> new IceSpearItem());
	public static final DeferredHolder<Item, Item> RAIN_ARMOR_HELMET = REGISTRY.register("rain_armor_helmet", () -> new RainArmorItem.Helmet());
	public static final DeferredHolder<Item, Item> RAIN_ARMOR_CHESTPLATE = REGISTRY.register("rain_armor_chestplate", () -> new RainArmorItem.Chestplate());
	public static final DeferredHolder<Item, Item> RAIN_ARMOR_LEGGINGS = REGISTRY.register("rain_armor_leggings", () -> new RainArmorItem.Leggings());
	public static final DeferredHolder<Item, Item> RAIN_ARMOR_BOOTS = REGISTRY.register("rain_armor_boots", () -> new RainArmorItem.Boots());
	public static final DeferredHolder<Item, Item> TORNADO_ARMOR_HELMET = REGISTRY.register("tornado_armor_helmet", () -> new TornadoArmorItem.Helmet());
	public static final DeferredHolder<Item, Item> TORNADO_ARMOR_CHESTPLATE = REGISTRY.register("tornado_armor_chestplate", () -> new TornadoArmorItem.Chestplate());
	public static final DeferredHolder<Item, Item> TORNADO_ARMOR_LEGGINGS = REGISTRY.register("tornado_armor_leggings", () -> new TornadoArmorItem.Leggings());
	public static final DeferredHolder<Item, Item> TORNADO_ARMOR_BOOTS = REGISTRY.register("tornado_armor_boots", () -> new TornadoArmorItem.Boots());
	public static final DeferredHolder<Item, Item> OCEAN_ARMOR_HELMET = REGISTRY.register("ocean_armor_helmet", () -> new OceanArmorItem.Helmet());
	public static final DeferredHolder<Item, Item> OCEAN_ARMOR_CHESTPLATE = REGISTRY.register("ocean_armor_chestplate", () -> new OceanArmorItem.Chestplate());
	public static final DeferredHolder<Item, Item> OCEAN_ARMOR_LEGGINGS = REGISTRY.register("ocean_armor_leggings", () -> new OceanArmorItem.Leggings());
	public static final DeferredHolder<Item, Item> OCEAN_ARMOR_BOOTS = REGISTRY.register("ocean_armor_boots", () -> new OceanArmorItem.Boots());
	public static final DeferredHolder<Item, Item> PLANTS_ARMOR_HELMET = REGISTRY.register("plants_armor_helmet", () -> new PlantsArmorItem.Helmet());
	public static final DeferredHolder<Item, Item> PLANTS_ARMOR_CHESTPLATE = REGISTRY.register("plants_armor_chestplate", () -> new PlantsArmorItem.Chestplate());
	public static final DeferredHolder<Item, Item> PLANTS_ARMOR_LEGGINGS = REGISTRY.register("plants_armor_leggings", () -> new PlantsArmorItem.Leggings());
	public static final DeferredHolder<Item, Item> PLANTS_ARMOR_BOOTS = REGISTRY.register("plants_armor_boots", () -> new PlantsArmorItem.Boots());
	public static final DeferredHolder<Item, Item> ANIMALS_ARMOR_HELMET = REGISTRY.register("animals_armor_helmet", () -> new AnimalsArmorItem.Helmet());
	public static final DeferredHolder<Item, Item> ANIMALS_ARMOR_CHESTPLATE = REGISTRY.register("animals_armor_chestplate", () -> new AnimalsArmorItem.Chestplate());
	public static final DeferredHolder<Item, Item> ANIMALS_ARMOR_LEGGINGS = REGISTRY.register("animals_armor_leggings", () -> new AnimalsArmorItem.Leggings());
	public static final DeferredHolder<Item, Item> ANIMALS_ARMOR_BOOTS = REGISTRY.register("animals_armor_boots", () -> new AnimalsArmorItem.Boots());
	public static final DeferredHolder<Item, Item> METAL_ARMOR_HELMET = REGISTRY.register("metal_armor_helmet", () -> new MetalArmorItem.Helmet());
	public static final DeferredHolder<Item, Item> METAL_ARMOR_CHESTPLATE = REGISTRY.register("metal_armor_chestplate", () -> new MetalArmorItem.Chestplate());
	public static final DeferredHolder<Item, Item> METAL_ARMOR_LEGGINGS = REGISTRY.register("metal_armor_leggings", () -> new MetalArmorItem.Leggings());
	public static final DeferredHolder<Item, Item> METAL_ARMOR_BOOTS = REGISTRY.register("metal_armor_boots", () -> new MetalArmorItem.Boots());
	public static final DeferredHolder<Item, Item> LIGHTNING_FALCHION = REGISTRY.register("lightning_falchion", () -> new LightningFalchionItem());
	public static final DeferredHolder<Item, Item> SOUND_DAGGER = REGISTRY.register("sound_dagger", () -> new SoundDaggerItem());
	public static final DeferredHolder<Item, Item> CRYSTAL_KNIFE = REGISTRY.register("crystal_knife", () -> new CrystalKnifeItem());
	public static final DeferredHolder<Item, Item> RAIN_BOW = REGISTRY.register("rain_bow", () -> new RainBowItem());
	public static final DeferredHolder<Item, Item> LAVA_HAMMER = REGISTRY.register("lava_hammer", () -> new LavaHammerItem());
	public static final DeferredHolder<Item, Item> TORNADO_AXE = REGISTRY.register("tornado_axe", () -> new TornadoAxeItem());
	public static final DeferredHolder<Item, Item> OCEANIC_TRIDENT = REGISTRY.register("oceanic_trident", () -> new OceanicTridentItem());
	public static final DeferredHolder<Item, Item> GREEN_STAFF = REGISTRY.register("green_staff", () -> new GreenStaffItem());
	public static final DeferredHolder<Item, Item> ANIMALS_HALBERD = REGISTRY.register("animals_halberd", () -> new AnimalsHalberdItem());
	public static final DeferredHolder<Item, Item> RIGHT_METAL_GAUNTLET = REGISTRY.register("right_metal_gauntlet", () -> new RightMetalGauntletItem());
	public static final DeferredHolder<Item, Item> LEFT_METAL_GAUNTLET = REGISTRY.register("left_metal_gauntlet", () -> new LeftMetalGauntletItem());
	public static final DeferredHolder<Item, Item> LIGHT_ARMOR_HELMET = REGISTRY.register("light_armor_helmet", () -> new LightArmorItem.Helmet());
	public static final DeferredHolder<Item, Item> LIGHT_ARMOR_CHESTPLATE = REGISTRY.register("light_armor_chestplate", () -> new LightArmorItem.Chestplate());
	public static final DeferredHolder<Item, Item> LIGHT_ARMOR_LEGGINGS = REGISTRY.register("light_armor_leggings", () -> new LightArmorItem.Leggings());
	public static final DeferredHolder<Item, Item> LIGHT_ARMOR_BOOTS = REGISTRY.register("light_armor_boots", () -> new LightArmorItem.Boots());
	public static final DeferredHolder<Item, Item> LIGHT_SWORD = REGISTRY.register("light_sword", () -> new LightSwordItem());
	public static final DeferredHolder<Item, Item> SHADOW_ARMOR_HELMET = REGISTRY.register("shadow_armor_helmet", () -> new ShadowArmorItem.Helmet());
	public static final DeferredHolder<Item, Item> SHADOW_ARMOR_CHESTPLATE = REGISTRY.register("shadow_armor_chestplate", () -> new ShadowArmorItem.Chestplate());
	public static final DeferredHolder<Item, Item> SHADOW_ARMOR_LEGGINGS = REGISTRY.register("shadow_armor_leggings", () -> new ShadowArmorItem.Leggings());
	public static final DeferredHolder<Item, Item> SHADOW_ARMOR_BOOTS = REGISTRY.register("shadow_armor_boots", () -> new ShadowArmorItem.Boots());
	public static final DeferredHolder<Item, Item> SHADOW_SCYTHE = REGISTRY.register("shadow_scythe", () -> new ShadowScytheItem());
	public static final DeferredHolder<Item, Item> VACUUM_ARMOR_HELMET = REGISTRY.register("vacuum_armor_helmet", () -> new VacuumArmorItem.Helmet());
	public static final DeferredHolder<Item, Item> VACUUM_ARMOR_CHESTPLATE = REGISTRY.register("vacuum_armor_chestplate", () -> new VacuumArmorItem.Chestplate());
	public static final DeferredHolder<Item, Item> VACUUM_ARMOR_LEGGINGS = REGISTRY.register("vacuum_armor_leggings", () -> new VacuumArmorItem.Leggings());
	public static final DeferredHolder<Item, Item> VACUUM_ARMOR_BOOTS = REGISTRY.register("vacuum_armor_boots", () -> new VacuumArmorItem.Boots());
	public static final DeferredHolder<Item, Item> VACUUM_DAGGER = REGISTRY.register("vacuum_dagger", () -> new VacuumDaggerItem());
	public static final DeferredHolder<Item, Item> ENERGY_ARMOR_HELMET = REGISTRY.register("energy_armor_helmet", () -> new EnergyArmorItem.Helmet());
	public static final DeferredHolder<Item, Item> ENERGY_ARMOR_CHESTPLATE = REGISTRY.register("energy_armor_chestplate", () -> new EnergyArmorItem.Chestplate());
	public static final DeferredHolder<Item, Item> ENERGY_ARMOR_LEGGINGS = REGISTRY.register("energy_armor_leggings", () -> new EnergyArmorItem.Leggings());
	public static final DeferredHolder<Item, Item> ENERGY_ARMOR_BOOTS = REGISTRY.register("energy_armor_boots", () -> new EnergyArmorItem.Boots());
	public static final DeferredHolder<Item, Item> ENERGY_STAFF = REGISTRY.register("energy_staff", () -> new EnergyStaffItem());
	public static final DeferredHolder<Item, Item> SUN_ARMOR_HELMET = REGISTRY.register("sun_armor_helmet", () -> new SunArmorItem.Helmet());
	public static final DeferredHolder<Item, Item> SUN_ARMOR_CHESTPLATE = REGISTRY.register("sun_armor_chestplate", () -> new SunArmorItem.Chestplate());
	public static final DeferredHolder<Item, Item> SUN_ARMOR_LEGGINGS = REGISTRY.register("sun_armor_leggings", () -> new SunArmorItem.Leggings());
	public static final DeferredHolder<Item, Item> SUN_ARMOR_BOOTS = REGISTRY.register("sun_armor_boots", () -> new SunArmorItem.Boots());
	public static final DeferredHolder<Item, Item> SUN_BATTERY = REGISTRY.register("sun_battery", () -> new SunBatteryItem());
	public static final DeferredHolder<Item, Item> SOLAR_BLADE = REGISTRY.register("solar_blade", () -> new SolarBladeItem());

	public static void register(IEventBus bus) {
		REGISTRY.register(bus);
	}

	private static DeferredHolder<Item, Item> block(DeferredHolder<Block, Block> block) {
		return REGISTRY.register(block.getId().getPath(), () -> new BlockItem(block.get(), new Item.Properties()));
	}

	@SubscribeEvent
	@OnlyIn(Dist.CLIENT)
	public static void clientLoad(FMLClientSetupEvent event) {
		event.enqueueWork(() -> {
			ItemProperties.register(FIRE_STONE.get(), new ResourceLocation("power:fire_stone_recharge"), (itemStackToRender, clientWorld, entity, itemEntityId) -> (float) StoneGetRechargeStateProcedure.execute(itemStackToRender));
			ItemProperties.register(AIR_STONE.get(), new ResourceLocation("power:air_stone_recharge"), (itemStackToRender, clientWorld, entity, itemEntityId) -> (float) StoneGetRechargeStateProcedure.execute(itemStackToRender));
			ItemProperties.register(EARTH_STONE.get(), new ResourceLocation("power:earth_stone_recharge"), (itemStackToRender, clientWorld, entity, itemEntityId) -> (float) StoneGetRechargeStateProcedure.execute(itemStackToRender));
			ItemProperties.register(WATER_STONE.get(), new ResourceLocation("power:water_stone_recharge"), (itemStackToRender, clientWorld, entity, itemEntityId) -> (float) StoneGetRechargeStateProcedure.execute(itemStackToRender));
			ItemProperties.register(ETHER_STONE.get(), new ResourceLocation("power:ether_stone_recharge"), (itemStackToRender, clientWorld, entity, itemEntityId) -> (float) StoneGetRechargeStateProcedure.execute(itemStackToRender));
			ItemProperties.register(ICE_STONE.get(), new ResourceLocation("power:ice_stone_recharge"), (itemStackToRender, clientWorld, entity, itemEntityId) -> (float) StoneGetRechargeStateProcedure.execute(itemStackToRender));
			ItemProperties.register(LIGHTNING_STONE.get(), new ResourceLocation("power:lightning_stone_recharge"), (itemStackToRender, clientWorld, entity, itemEntityId) -> (float) StoneGetRechargeStateProcedure.execute(itemStackToRender));
			ItemProperties.register(SOUND_STONE.get(), new ResourceLocation("power:sound_stone_recharge"), (itemStackToRender, clientWorld, entity, itemEntityId) -> (float) StoneGetRechargeStateProcedure.execute(itemStackToRender));
			ItemProperties.register(CRYSTAL_STONE.get(), new ResourceLocation("power:crystal_stone_recharge"), (itemStackToRender, clientWorld, entity, itemEntityId) -> (float) StoneGetRechargeStateProcedure.execute(itemStackToRender));
			ItemProperties.register(LAVA_STONE.get(), new ResourceLocation("power:lava_stone_recharge"), (itemStackToRender, clientWorld, entity, itemEntityId) -> (float) StoneGetRechargeStateProcedure.execute(itemStackToRender));
			ItemProperties.register(RAIN_STONE.get(), new ResourceLocation("power:rain_stone_recharge"), (itemStackToRender, clientWorld, entity, itemEntityId) -> (float) StoneGetRechargeStateProcedure.execute(itemStackToRender));
			ItemProperties.register(TORNADO_STONE.get(), new ResourceLocation("power:tornado_stone_recharge"), (itemStackToRender, clientWorld, entity, itemEntityId) -> (float) StoneGetRechargeStateProcedure.execute(itemStackToRender));
			ItemProperties.register(OCEAN_STONE.get(), new ResourceLocation("power:ocean_stone_recharge"), (itemStackToRender, clientWorld, entity, itemEntityId) -> (float) StoneGetRechargeStateProcedure.execute(itemStackToRender));
			ItemProperties.register(PLANTS_STONE.get(), new ResourceLocation("power:plants_stone_recharge"), (itemStackToRender, clientWorld, entity, itemEntityId) -> (float) StoneGetRechargeStateProcedure.execute(itemStackToRender));
			ItemProperties.register(ANIMALS_STONE.get(), new ResourceLocation("power:animals_stone_recharge"), (itemStackToRender, clientWorld, entity, itemEntityId) -> (float) StoneGetRechargeStateProcedure.execute(itemStackToRender));
			ItemProperties.register(METAL_STONE.get(), new ResourceLocation("power:metal_stone_recharge"), (itemStackToRender, clientWorld, entity, itemEntityId) -> (float) StoneGetRechargeStateProcedure.execute(itemStackToRender));
			ItemProperties.register(LIGHT_STONE.get(), new ResourceLocation("power:light_stone_recharge"), (itemStackToRender, clientWorld, entity, itemEntityId) -> (float) StoneGetRechargeStateProcedure.execute(itemStackToRender));
			ItemProperties.register(SHADOW_STONE.get(), new ResourceLocation("power:shadow_stone_recharge"), (itemStackToRender, clientWorld, entity, itemEntityId) -> (float) StoneGetRechargeStateProcedure.execute(itemStackToRender));
			ItemProperties.register(VACUUM_STONE.get(), new ResourceLocation("power:vacuum_stone_recharge"), (itemStackToRender, clientWorld, entity, itemEntityId) -> (float) StoneGetRechargeStateProcedure.execute(itemStackToRender));
			ItemProperties.register(ENERGY_STONE.get(), new ResourceLocation("power:energy_stone_recharge"), (itemStackToRender, clientWorld, entity, itemEntityId) -> (float) StoneGetRechargeStateProcedure.execute(itemStackToRender));
			ItemProperties.register(SUN_STONE.get(), new ResourceLocation("power:sun_stone_recharge"), (itemStackToRender, clientWorld, entity, itemEntityId) -> (float) StoneGetRechargeStateProcedure.execute(itemStackToRender));
		});
	}
}
